openapi: 3.0.0
info:
  title: HOME Project - Open API 3.0
  description: "OpenAPI 3.0 specification for HOME Project code generation"
  version: 1.0.0
servers:
  - url: /api/0
tags:
  - name: news
    description: News management operations
  - name: chats
    description: Operations with chats
  - name: messages
    description: Operations with messages-
  - name: user
    description: user management
paths:
  /news:
    post:
      tags:
        - news
      summary: Add a news to the home page
      description: Add a news to the home page
      operationId: addNews
      requestBody:
        description: Create a news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostNews'
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - news
      summary: Get all news to the home page
      description: This endpoint delivers all news to the Home Page
      operationId: getAllNews
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: type
          schema:
            type: string
            enum:
              - Country
              - Local
              - Area
          required: false
          description: Filter news by type.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadNews'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /news/{id}:
    get:
      tags:
        - news
      summary: Get an existing news by its id
      description: View an existing news by its Identifier
      operationId: getNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - news
      summary: Update an existing news
      description: Update an existing news by Identifier
      operationId: updateNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existing news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNews'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - news
      summary: Delete the chosen news
      operationId: deleteNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /chats:
    get:
      tags:
        - chats
      summary: Gets all chats
      description: Get all chats
      operationId: getAllChats
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 3
          required: false
          description: The number of items to return.
      responses:
        '200':
          description: Got all chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadAllChats'
        'default':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - chats
      summary: Add a new chat
      description: Add a new chat
      operationId: addChats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChat'
      responses:
        '201':
          description: Chat is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        'default':
          $ref: '#/components/responses/InternalServerError'
  /chats/{chat_id}:
    get:
      tags:
        - chats
      summary: Gets specific chat by id
      description: Gets specific chat by id
      operationId: getChats
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      responses:
        '200':
          description: Got specific chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadChat'
        '404':
          $ref: '#/components/responses/NotFound'
        'default':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - chats
      summary: Updates a specific chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChat'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - chats
      summary: Deletes a chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
      responses:
        '204':
          description: Chat is deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /chats/{chat_id}/messages:
    get:
      tags:
        - messages
      summary: Gets back the chat history of messages by id
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 50
            default: 10
          required: false
          description: The number of items to return.
      responses:
        '200':
          description: Got all messages from specific chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAllMessages'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /chats/{chat_id}/messages/{message_id}:
    get:
      tags:
        - messages
      summary: Gets message from specific chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      responses:
        '200':
          description: Got message from specific chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadMessage'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - messages
      summary: Creates a new message in chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessage'
      responses:
        '201':
          description: Message in chat is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - messages
      summary: Updates a message in chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessage'
      responses:
        '200':
          description: Message in chat is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "default":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - messages
      summary: Deletes a message in chat
      parameters:
        - name: chat_id
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - name: message_id
          in: path
          required: true
          description: ID of the message
          schema:
            type : integer
            minimum: 1
      responses:
        '204':
          description: Message in chat is deleted
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /users:
    post:
      tags:
        - User
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: Create a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - User
      summary: "Get all users"
      description: ''
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: "The number of items to skip before starting to collect the response"
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          description: "The number of items to return"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      tags:
        - User
      summary: "Get user by user name"
      description: ''
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - User
      summary: Update current user
      description: Update current user
      operationId: updateUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Update current user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - User
      summary: Delete user by ID
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    BadRequest:
      description: Validation Exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: You do not have permission to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict with current state of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    News:
      required:
        - title
        - type
        - description
        - text
        - createDate
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: News In The Local Area
        type:
          type: string
          enum: [Country, Local, Area]
          example: Local
        photoUrl:
          type: string
          format: url
        createDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        description:
          type: string
        source:
          type: string
        text:
          type: string

    ReadNews:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        photoUrl:
          type: string
          format: url
        type:
          type: string
          enum: [Country, Local, Area]
          example: Local
        createOrUpdateDate:
          type: string
          format: date-time
        text:
          type: string
        source:
          type: string
          format: url

    PostNews:
      required:
        - title
        - type
        - description
        - text
      type: object
      properties:
        title:
          type: string
          example: News in the Some Area
        type:
          type: string
          enum: [Country, Local, Area]
          example: Local
        photoUrl:
          type: string
          format: url
        description:
          type: string
        source:
          type: string
        text:
          type: string

    UpdateNews:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
          enum: [Country, Local, Area]
          example: Local
        photoUrl:
          type: string
          format: url
        description:
          type: string
        source:
          type: string
        text:
          type: string

    Error:
      type: object
      properties:
        responseCode:
          type: string
        description:
          type: string
        errorMessage:
          type: string

    Chat:
      type: object
      properties:
        id:
          type: number
          example: 23
        name:
          type: string
          example: "chat of the floor 4, building 5"
        date_created:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        date_updated:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        icon_link:
          type: string
          example: "aw.link/sndfnjk74"
        members:
          type: array
          items:
            type: string
            example: "10, 8, 56, 9"

    ReadAllChats:
      type: object
      properties:
        id:
          type: number
          example: 5
        name:
          type: string
          example: "super-chat"
        icon:
          type: string
          example: "/link-here"
        members:
          type: array
          items:
            type: string
            example: "9, 65, 45, 6"

    ReadChat:
      type: object
      properties:
        id:
          type: number
          example: 4
        name:
          type: string
          example: "super chat"
        icon:
          type: string
          example: "/link-here"
        members:
          type: array
          items:
            type: string
            example: "4, 6, 87, 6"

    CreateChat:
      type: object
      properties:
        name:
          type: string
          example: "New super chat"
        icon:
          type: string
          example: "/link/here/to/icon"
        members:
          type: array
          items:
            type: string
            example: "10, 5, 7, 4"

    UpdateChat:
      type: object
      properties:
        name:
          type: string
          example: "supe chat"
        icon:
          type: string
          example: "/link/here/to/icon"
        members:
          type: array
          items:
            type: string
            example: "4, 6, 7, 234"

    Message:
      type: object
      properties:
        id:
          type: number
          example: 197
        body:
          type: string
          example: "aws.imagelink/trh6u59"
        date_created:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        date_updated:
          type: string
          format: date-time
          example: 2020-11-01T19:23Z
        from_id:
          type: number
          example: 45
        to_id:
          type: number
          example: 76
        type:
          type: string
          enum: [text, image, file]
          example: image
        is_important:
          type: boolean

    ReadAllMessages:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
            example: 197
          body:
            type: string
            example: "hello Ivan, doing cleanup doing?"
          from_id:
            type: number
            example: 3
          to_id:
            type: number
            example: 7

    ReadMessage:
      type: object
      properties:
        id:
          type: number
          example: 197
        body:
          type: string
          example: "yes, I want to vote for Grisha"
        from_id:
          type: number
          example: 3
        to_id:
          type: number
          example: 7

    CreateMessage:
      type: object
      properties:
        body:
          type: string
          example: "Hi! New in chat"
        from_id:
          type: number
          example: 7
        to_id:
          type: number
          example: 10
        type:
          type: string
          example: "text"
        is_important:
          type: boolean
          example: true

    UpdateMessage:
      type: object
      properties:
        body:
          type: string
          example: "I want to change OSBB"
        is_important:
          type: boolean
          example: true

    CreateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    OrderList:
      type: array
      items:
        type: object
        required:
          - order
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: mechanic
          executor:
            type: string
            example: Ivan Ivanov
          customer:
            type: string
            example: Viktor Vasilenko
          orderDate:
            type: string
            example: 26.04.2020
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: Petro
        lastName:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        password:
          type: string
          example: passWord123
        role:
          type: string
          enum: [ user, owner, admin, executor ]
          example: user
        houseId:
          type: integer
          example: 1
        orders:
          type: array
          items:
            type: object
            required:
              - $ref: '#/components/schemas/Order'
        phone:
          type: string
          example: (0562) 345 432
        mobilePhone:
          type: string
          example: (067) 123 321 1
        activStatus:
          type: boolean
          enum: [ true, false ]
        createDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          example: Petro
        lastName:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        password:
          type: string
          example: passWord123
        role:
          type: string
          enum: [ user, owner, admin, executor ]
          example: user
        houseId:
          type: integer
          example: 1
        orders:
          type: array
          items:
            type: object
            required:
              - $ref: '#/components/schemas/Order'
        phone:
          type: string
          example: (0562) 345 432
        mobilePhone:
          type: string
          example: (067) 123 321 1
        activStatus:
          type: boolean
          enum: [ true, false ]
        createDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time