openapi: 3.0.0
info:
  title: HomePage - OpenAPI 3.0
  description: "This is a Home Page sample of Home Project based on the OpenAPI 3.0 specification."
  license:
    name: MIT License
    url: https://opensource.org/licenses/mit-license.php
  contact:
    url: https://github.com/ita-social-projects/Home
  version: 1.0.0
servers:
  - url: /api/0
tags:
  - name: news
    description: News management operations
  - name: user
    description: User management
  - name: cooperation
    description: Cooperation managment
  - name: house
    description: Operations with house
  - name: address
    description: Operations with address
paths:
  /news:
    post:
      tags:
        - news
      summary: Add a news to the home page
      description: Add a news to the home page
      operationId: addNews
      requestBody:
        description: Create a news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNews'
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "default":
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - news
      summary: Get all news to the home page
      description: This endpoint delivers all news to the Home Page
      operationId: getAllNews
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: text
          schema:
            type: string
        - in: query
          name: source
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /news/{id}:
    get:
      tags:
        - news
      summary: Get an existing news by its id
      description: View an existing news by its Identifier
      operationId: getNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - news
      summary: Update an existing news
      description: Update an existing news by Identifier
      operationId: updateNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing news
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNews'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadNews'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - news
      summary: Delete the chosen news
      description: Delete news by ID
      operationId: deleteNews
      parameters:
        - name: id
          in: path
          description: Id value that need to be considered for filter
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "default":
          $ref: '#/components/responses/InternalServerError'
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: Create a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ReadUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - user
      summary: "Get all users"
      description: Get all users
      operationId: getAllUsers
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
        - in: query
          name: firstName
          schema:
            type: string
        - in: query
          name: lastName
          schema:
            type: string
        - in: query
          name: contact
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      tags:
        - user
      summary: "Get user by id"
      description: Get user by id
      operationId: getUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Update current user
      description: Update current user
      operationId: updateUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Update current user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadUser"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: Delete user by ID
      operationId: removeUser
      parameters:
        - name: "id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation:
    post:
      tags:
        - cooperation
      summary: "Create cooperation"
      description: Create a new cooperation
      operationId: createCooperation
      requestBody:
        description: Create a new cooperation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCooperation'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadCooperation'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - cooperation
      summary: "Get all cooperation"
      description: Get all cooperation
      operationId: queryCooperation
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
            example: "some example"
        - in: query
          name: filter
          schema:
            type: string
            example: "some example"
        - in: query
          name: name
          schema:
            type: string
            example: "Dobro"
        - in: query
          name: iban
          schema:
            type: string
            example:  "Something else"
        - in: query
          name: usreo
          schema:
            type: string
            example:  "A9856738"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadCooperation"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation/{cooperation_id}:
    get:
      tags:
        - cooperation
      summary: "Get cooperation by cooperation id"
      description: Get cooperation by id
      operationId: getCooperation
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadCooperation"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - cooperation
      summary: "Update current cooperation"
      description: Update cooperation by id
      operationId: updateCooperation
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Update current cooperation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCooperation'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadCooperation"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cooperation
      summary: "Delete cooperation by ID"
      description: Delete cooperation by id
      operationId: removeCooperation
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation/{cooperation_id}/houses:
    post:
      tags:
        - house
      summary: "Create house"
      description: Create a new house
      operationId: createHouse
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Create a new house
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHouse'
        required: true
      responses:
        '201':
          description: Successful created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadHouse'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - house
      summary: "Get all houses"
      description: Get all houses
      operationId: queryHouse
      parameters:
        - name: "cooperation_id"
          in: path
          required: true
          description: ID of the chat
          schema:
            type : integer
            minimum: 1
        - in: query
          name: pageNumber
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: The number of current page.
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 0
            maximum: 10
            default: 5
          required: false
          description: The number of items to return.
        - in: query
          name: sort
          schema:
            type: string
            default: id,asc
            example: "some example"
        - in: query
          name: filter
          schema:
            type: string
            example: "some example"
        - in: query
          name: quantityFlat
          schema:
            type: integer
            example: 12
        - in: query
          name: adjoiningArea
          schema:
            type: integer
            example: 40
        - in: query
          name: houseArea
          schema:
            type: string
            example: "some example"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReadHouse"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'
  /cooperation/{cooperation_id}/houses/{house_id}:
    get:
      tags:
        - house
      summary: "Get house by house id"
      description: Get house by id
      operationId: getHouse
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "house_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadHouse"
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - house
      summary: "Update current house"
      description: Update gouse by id
      operationId: updateHouse
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "house_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Update current house
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHouse'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadHouse"
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - house
      summary: "Delete house by ID"
      description: Delete house by id
      operationId: removeHouse
      parameters:
        - name: "cooperation_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: "house_id"
          in: "path"
          description: "Use 1 for testing."
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "204":
          description: Successful operation
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
security:
  - basicAuth: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    BadRequest:
      description: Validation Exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: You do not have permission to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InternalServerError:
      description: Something went wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  schemas:
    BaseReadView:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
    ReadNews:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        title:
          type: string
          example: News In The Local Area
          maximum: 50
        photoUrl:
          type: string
          format: url
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          example: Gas turn off
        source:
          type: string
          example: Example
        text:
          type: string
          example: example
    CreateNews:
      required:
        - title
        - description
        - text
      type: object
      properties:
        title:
          type: string
          example: News in the Some Area
          minLength: 1
          maxLength: 70
        photoUrl:
          type: string
          example: url
        description:
          type: string
          minLength: 1
          maxLength: 150
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          example: example
    UpdateNews:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 50
          example: example
        photoUrl:
          type: string
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          minLength: 1
          maxLength: 50
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          maxLength: 150
          example: example
    ApiError:
      type: object
      properties:
        responseCode:
          type: integer
          example: 404
        errorMessage:
          type: string
          example: example
    CreateUser:
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: "Petro"
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: "Zinchenko"
          minLength: 1
          maxLength: 50
        email:
          pattern: '^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 3
          maxLength: 254
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
    ReadUser:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        firstName:
          type: string
          example: Petro
        lastName:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        contact:
          type: string
          example: "+380506617305"
    UpdateUser:
      type: object
      properties:
        firstName:
          pattern: '\w+'
          type: string
          example: Petro
          minLength: 1
          maxLength: 50
        lastName:
          pattern: '\w+'
          type: string
          example: Petrov
          minLength: 1
          maxLength: 50
        contact:
          type: string
          example: "+380506617305"
          minLength: 10
          maxLength: 13
        contacts:
          type: string
          example: "+380506617305"
    CreateCooperation:
      required:
        - name
        - usreo
        - iban
        - address
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "Something else"
          minLength: 1
          maxLength: 34
        address:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          items:
            $ref: "#/components/schemas/CreateHouse"
    ReadCooperation:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "Something else"
          minLength: 1
          maxLength: 50
        address:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          items:
            $ref: "#/components/schemas/ReadHouse"
    UpdateCooperation:
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "Something else"
          minLength: 1
          maxLength: 50
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        region:
          type: string
          example: "Dnipropetrovsk region"
          minLength: 1
          maxLength: 50
        city:
          type: string
          example: "Dnipro"
          minLength: 1
          maxLength: 50
        district:
          type: string
          example: "Zavodskoy"
          minLength: 1
          maxLength: 50
        street:
          type: string
          example: "Kirova"
          minLength: 1
          maxLength: 25
        houseBlock:
          type: string
          example: "2/B"
          minLength: 1
          maxLength: 10
        houseNumber:
          type: string
          example: "23-B"
          minLength: 1
          maxLength: 50
        zipCode:
          type: string
          example: 52956
    CreateHouse:
      required:
        - quantity_flat
        - house_area
        - adjoining_area
        - address
      type: object
      properties:
        quantityFlat:
          type: integer
          example: 45
        houseArea:
          type: number
          example: 25
        adjoiningArea:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'
    ReadHouse:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        quantityFlat:
          type: integer
          example: 45
        houseArea:
          type: number
          example: 25
        adjoiningArea:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'
#        cooperationId:
#          type: integer
#          example: 2
    UpdateHouse:
      type: object
      properties:
        quantityFlat:
          type: integer
          example: 45
        houseArea:
          type: number
          example: 25
        adjoiningArea:
          type: integer
          example: 12
#        cooperationId:
#          type: integer
#          example: 0
        address:
          $ref: '#/components/schemas/Address'