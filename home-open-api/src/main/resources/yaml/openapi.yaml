openapi: 3.0.3

info:
  title: HomePage - OpenAPI 3.0
  description: "This is a Home Page sample of Home Project based on the OpenAPI 3.0 specification."
  license:
    name: MIT License
    url: https://opensource.org/licenses/mit-license.php
  contact:
    url: https://github.com/ita-social-projects/Home
  version: 1.0.0

servers:
  - url: /api/0

tags:
  - name: news
    description: News management operations
  - name: user
    description: User management operations
  - name: contact
    description: Contact management operations
  - name: cooperation
    description: Cooperation management
  - name: house
    description: Operations with house
  - name: address
    description: Operations with address
  - name: invitaion
    description: Operation with invitation

paths:
  /news:
    post:
      tags:
        - news
      summary: Add a News to the home page
      description: The endpoint adds a News to the home page
      operationId: createNews
      requestBody:
        $ref: '#/components/requestBodies/CreateNewsBody'
      responses:
        201:
          $ref: '#/components/responses/NewsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - news
      summary: Get all News to the home page
      description: This endpoint delivers all News to the Home Page
      operationId: getAllNews
      parameters:
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/text'
        - $ref: '#/components/parameters/source'
      responses:
        200:
          $ref: '#/components/responses/NewsListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /news/{id}:
    get:
      tags:
        - news
      summary: Get an existing news by its ID
      description: View an existing news by its ID
      operationId: getNews
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/NewsResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - news
      summary: Update an existing News
      description: Update an existing News by its ID
      operationId: updateNews
      parameters:
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateNewsBody'
      responses:
        200:
          $ref: '#/components/responses/NewsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - news
      summary: Delete the chosen news
      description: Delete news by ID
      operationId: deleteNews
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users:
    post:
      tags:
        - user
      summary: Create user
      description: The endpoint creates a new User
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserBody'
      responses:
        201:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - user
      summary: Get all Users
      description: The endpoint gets all Users
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/first_name'
        - $ref: '#/components/parameters/last_name'
        - $ref: '#/components/parameters/contact_phone'
        - $ref: '#/components/parameters/contact_email'
      responses:
        200:
          $ref: '#/components/responses/UsersResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    get:
      tags:
        - user
      summary: Get User by ID
      description: The endpoint gets User by ID
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user
      summary: Update current User
      description: The endpoint updates current User by ID
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserBody'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: The endpoint deletes User by ID
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/contacts:
    post:
      tags:
        - contact
      summary: Create new Contact for the User
      description: The endpoint creates a new Contact for the specified user ID
      operationId: createContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateContactBody'
      responses:
        201:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - contact
      summary: Get all Contacts by User
      description: The endpoint retrieves the list of contacts associated with the specified user ID
      operationId: queryContactsOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/phone'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/main'
        - $ref: '#/components/parameters/type'

      responses:
        200:
          $ref: '#/components/responses/ContactsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /users/{user_id}/contacts/{id}:
    get:
      tags:
        - contact
      summary: Get Contact by ID
      description: The endpoint retrieves an existing contact
                   associated with the specified User by User and Contact IDs
      operationId: getContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - contact
      summary: Update Contact
      description: The endpoint updates information on a contact that exists
                  in the system by the specified User and Contact IDs
      operationId: updateContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateContactBody'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - contact
      summary: Delete Contact
      description: The endpoint deletes an existing Contact on a User associated with the
                   specified User and Contact IDs
      operationId: deleteContactOnUser
      parameters:
        - $ref: '#/components/parameters/p_user_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation:
    post:
      tags:
        - cooperation
      summary: Create Cooperation
      description: The endpoint creates a new Cooperation
      operationId: createCooperation
      requestBody:
        $ref: '#/components/requestBodies/CreateCooperationBody'
      responses:
        201:
          $ref: '#/components/responses/CooperationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - cooperation
      summary: Get All Cooperations
      description: Get all cooperation
      operationId: queryCooperation
      parameters:
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/iban'
        - $ref: '#/components/parameters/usreo'
      responses:
        200:
          $ref: '#/components/responses/CooperationsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{id}:
    get:
      tags:
        - cooperation
      summary: Get Cooperation by ID
      description: The endpoint gets Cooperation by ID
      operationId: getCooperation
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/CooperationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - cooperation
      summary: Update current Cooperation
      description: The endpoint updates current Cooperation by ID
      operationId: updateCooperation
      parameters:
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateCooperationBody'
      responses:
        200:
          $ref: '#/components/responses/CooperationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cooperation
      summary: Delete cooperation by ID
      description: The endpoint deletes Cooperation by ID
      operationId: deleteCooperation
      parameters:
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          description: Success
        401:
          $ref: '#/components/responses/NoContentResponse'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/houses:
    post:
      tags:
        - house
      summary: Create new House for the Cooperation
      description: The endpoint creates a new House for the specified Cooperation ID
      operationId: createHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateHouseBody'
      responses:
        201:
          $ref: '#/components/responses/HouseResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - house
      summary: Get all Houses by Cooperation
      description: The endpoint retrieves the list of houses associated with the specified cooperation ID
      operationId: queryHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/quantity_flat'
        - $ref: '#/components/parameters/adjoining_area'
        - $ref: '#/components/parameters/house_area'

      responses:
        200:
          $ref: '#/components/responses/HousesResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/houses/{id}:
    get:
      tags:
        - house
      summary: Get House by ID
      description: The endpoint retrieves an existing house
        associated with the specified Cooperation by Cooperation and House IDs
      operationId: getHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/HouseResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - house
      summary: Update current House
      description: The endpoint updates information on a house that exists
        in the system by the specified Cooperation and House IDs
      operationId: updateHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateHouseBody'
      responses:
        200:
          $ref: '#/components/responses/HouseResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - house
      summary: Delete house by ID
      description: The endpoint deletes an existing House on a Cooperation associated with the
        specified Coopeartion and House IDs
      operationId: deleteHouse
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/contacts:
    post:
      tags:
        - cooperation contact
      summary: Create new Contact for the Cooperation
      description: The endpoint creates Contacts for the specified Cooperation ID
      operationId: createContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateContactBody'
      responses:
        201:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - cooperation contact
      summary: Get all Contacts by Cooperation ID
      description: The endpoint retrieves the list of contacts associated with the specified cooperation ID
      operationId: queryContactsOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/page_number'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/phone'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/main'
        - $ref: '#/components/parameters/type'
      responses:
        200:
          $ref: '#/components/responses/ContactsResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/contacts/{id}:
    get:
      tags:
        - cooperation contact
      summary: Get Contact by ID
      description: The endpoint retrieves an existing contact
        associated with the specified Cooperation by Cooperation and Contact IDs
      operationId: getContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - cooperation contact
      summary: Update Contact
      description: The endpoint updates information on a contact that exists
          in the system by the specified Cooperation and Contact IDs
      operationId: updateContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateContactBody'
      responses:
        200:
          $ref: '#/components/responses/ContactResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - cooperation contact
      summary: Delete Contact
      description: The endpoint deletes an existing Contact on a Cooperation associated with the
        specified Cooperation and Contact IDs
      operationId: deleteContactOnCooperation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
        - $ref: '#/components/parameters/p_id'
      responses:
        204:
          $ref: '#/components/responses/NoContentResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/InternalServerError'

  /cooperation/{cooperation_id}/invitation:
    post:
      tags:
        - invitaion
      summary: Sending an invitation to cooperation
      description: The endpoint sends an invitation to join Сooperation for the specified Cooperation ID
      operationId: sendInvitation
      parameters:
        - $ref: '#/components/parameters/p_cooperation_id'
      requestBody:
        $ref: '#/components/requestBodies/CreateInvitationBody'
      responses:
        201:
          $ref: '#/components/responses/InvitationResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/InternalServerError'

security:
  - basicAuth: []

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    ReadInvitation:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
        type: object
      properties:
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 5
          maxLength: 320
        role:
          type: string
          example: admin
    CreateInvitation:
      required:
        - email
        - role
      type: object
      properties:
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 5
          maxLength: 320
        role:
          type: string
          example: admin

    BaseReadView:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
    ReadNews:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        title:
          type: string
          example: News In The Local Area
          maximum: 70
        photo_url:
          type: string
          format: url
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          example: Gas turn off
        source:
          type: string
          example: Example
        text:
          type: string
          example: example
    CreateNews:
      required:
        - title
        - description
        - text
      type: object
      properties:
        title:
          type: string
          example: News in the Some Area
          minLength: 1
          maxLength: 70
        photo_url:
          type: string
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          minLength: 1
          maxLength: 150
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          maxLength: 150
          example: example
    UpdateNews:
      type: object
      required:
        - title
        - description
        - text
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 70
          example: example
        photo_url:
          type: string
          example: https://miro.medium.com/max/2400/1*mk1-6aYaf_Bes1E3Imhc0A.jpeg
        description:
          type: string
          minLength: 1
          maxLength: 150
          example: example
        source:
          type: string
          example: example
        text:
          type: string
          minLength: 1
          maxLength: 150
          example: example
    ApiError:
      type: object
      properties:
        response_code:
          type: integer
          example: 404
        error_message:
          type: string
          example: example
    CreateUser:
      required:
        - first_name
        - last_name
        - email
        - password
      type: object
      properties:
        first_name:
          pattern: '\w+'
          type: string
          example: "Petro"
          minLength: 1
          maxLength: 50
        last_name:
          pattern: '\w+'
          type: string
          example: "Zinchenko"
          minLength: 1
          maxLength: 50
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: "p.t.z@gmail.com"
          minLength: 5
          maxLength: 320
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
        contacts:
          type: array
          example:
            - type: "email"
            - id: 1
            - main: false
            - email: "createUserEmail@example.com"
          items:
            $ref: '#/components/schemas/CreateContact'
    ReadUser:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        first_name:
          type: string
          example: Petro
        last_name:
          type: string
          example: Petrov
        email:
          type: string
          example: home@gmail.com
        contacts:
          type: array
          example:
            - type: "email"
            - id: 1
            - main: false
            - email: "readUserEmail@example.com"
          items:
            $ref: '#/components/schemas/ReadContact'
    UpdateUser:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          pattern: '\w+'
          type: string
          example: Petro
          minLength: 1
          maxLength: 50
        last_name:
          pattern: '\w+'
          type: string
          example: Petrov
          minLength: 1
          maxLength: 50
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          minLength: 5
          maxLength: 320
          type: string
          example: example@gmail.com
        password:
          pattern: '[a-zA-Z0-9]{8,}'
          type: string
          example: "mySuperStrongPass"
          minLength: 8
          maxLength: 128
    ContactType:
      description: Indicates the type of contact
      type: string
      enum:
        - email
        - phone
    ReadContact:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/ReadEmailContact'
          phone: '#/components/schemas/ReadPhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          type: boolean
          example: false
    ReadEmailContact:
      allOf:
        - $ref: '#/components/schemas/ReadContact'
      type: object
      properties:
        email:
          type: string
          example: home@gmail.com
    ReadPhoneContact:
      allOf:
        - $ref: '#/components/schemas/ReadContact'
      type: object
      properties:
        phone:
          pattern: '^(\+)?([- _():=+]?\d[- _():=+]?){10,13}(\s*)?$'
          minLength: 9
          maxLength: 13
          type: string
          example: "+380506617305"
    CreateContact:
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/CreateEmailContact'
          phone: '#/components/schemas/CreatePhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          default: false
          type: boolean
          example: false
    CreateEmailContact:
      allOf:
        - $ref: '#/components/schemas/CreateContact'
      type: object
      required:
        - email
      properties:
        email:
          minLength: 5
          maxLength: 320
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          type: string
          example: home@gmail.com
    CreatePhoneContact:
      allOf:
        - $ref: '#/components/schemas/CreateContact'
      type: object
      required:
        - phone
      properties:
        phone:
          pattern: '^(\+)?([- _():=+]?\d[- _():=+]?){10,13}(\s*)?$'
          minLength: 9
          maxLength: 13
          type: string
          example: "+380506617305"
    UpdateContact:
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/UpdateEmailContact'
          phone: '#/components/schemas/UpdatePhoneContact'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ContactType'
        main:
          type: boolean
          example: false
    UpdateEmailContact:
      allOf:
        - $ref: '#/components/schemas/UpdateContact'
      type: object
      required:
        - email
      properties:
        email:
          pattern: '^([\w!#$%&''*+\/=?{|}~^-]|\.){1,60}@(?!-)(?:[a-zA-Z0-9-]{2,250}+\.)+[a-zA-Z]{2,6}$'
          minLength: 9
          maxLength: 320
          type: string
          example: other@gmail.com
    UpdatePhoneContact:
      allOf:
        - $ref: '#/components/schemas/UpdateContact'
      type: object
      required:
        - phone
      properties:
        phone:
          pattern: '^(\+)?([- _():=+]?\d[- _():=+]?){10,13}(\s*)?$'
          minLength: 9
          maxLength: 13
          type: string
          example: "+380966617305"
    CreateCooperation:
      required:
        - name
        - usreo
        - iban
        - address
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "77778"
          minLength: 1
          maxLength: 34
        address:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          example: List of houses
          items:
            $ref: "#/components/schemas/CreateHouse"
        contacts:
          type: array
          example:
            - type: "email"
            - main: false
            - email: "createUserEmail@example.com"
          items:
            $ref: "#/components/schemas/CreateContact"
    ReadCooperation:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "77778"
          minLength: 1
          maxLength: 50
        address:
          $ref: '#/components/schemas/Address'
        houses:
          type: array
          example: List of houses
          items:
            $ref: "#/components/schemas/ReadHouse"
        contacts:
          type: array
          example:
            - type: "email"
            - main: false
            - email: "createUserEmail@example.com"
          items:
            $ref: "#/components/schemas/ReadContact"
    UpdateCooperation:
      required:
        - name
        - usreo
        - iban
        - address
      type: object
      properties:
        name:
          type: string
          example: "Home Association"
          minLength: 1
          maxLength: 50
        usreo:
          type: string
          example: "A2456FT90"
          minLength: 1
          maxLength: 12
        iban:
          type: string
          example: "77778"
          minLength: 1
          maxLength: 50
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        region:
          type: string
          example: "Dnipropetrovsk region"
          minLength: 1
          maxLength: 50
        city:
          type: string
          example: "Dnipro"
          minLength: 1
          maxLength: 50
        district:
          type: string
          example: "Zavodskoy"
          minLength: 1
          maxLength: 50
        street:
          type: string
          example: "Kirova"
          minLength: 1
          maxLength: 25
        house_block:
          type: string
          example: "2/B"
          minLength: 1
          maxLength: 10
        house_number:
          type: string
          example: "23-B"
          minLength: 1
          maxLength: 10
        zip_code:
          type: string
          example: 52956
    CreateHouse:
      required:
        - quantity_flat
        - house_area
        - adjoining_area
        - address
      type: object
      properties:
        quantity_flat:
          type: integer
          example: 45
        house_area:
          type: number
          example: 25
        adjoining_area:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'
    ReadHouse:
      allOf:
        - $ref: '#/components/schemas/BaseReadView'
      type: object
      properties:
        quantity_flat:
          type: integer
          example: 45
        house_area:
          type: number
          example: 25
        adjoining_area:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'
    UpdateHouse:
      required:
        - quantity_flat
        - house_area
        - adjoining_area
        - address
      type: object
      properties:
        quantity_flat:
          type: integer
          example: 45
        house_area:
          type: number
          example: 25
        adjoining_area:
          type: integer
          example: 12
        address:
          $ref: '#/components/schemas/Address'

  responses:
    NoContentResponse:
      description: The request was succesfully processed.
    BadRequest:
      description: Validation Exception.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Forbidden:
      description: You do not have permission to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Conflict:
      description: Conflict with current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    InternalServerError:
      description: Something went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NewsResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadNews'
    NewsListResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadNews'
    UserResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadUser'
    UsersResponse:
      description: Success
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReadUser"
    ContactResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadContact'
    ContactsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadContact'
    CooperationResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadCooperation'
    CooperationsResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadCooperation'
    HouseResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadHouse'
    HousesResponse:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ReadHouse'

  requestBodies:
    CreateNewsBody:
      description: A payload for creating a new News
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateNews'
      required: true
    UpdateNewsBody:
      description: A payload for updating an existing News
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateNews'
      required: true
    CreateUserBody:
      description: A payload for creating a User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUser'
      required: true
    UpdateUserBody:
      description: A payload for updating current User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUser'
      required: true
    CreateContactBody:
      description: A payload for creating a contact
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateContact'
      required: true
    UpdateContactBody:
      description: A payload for updating an existing Contact
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateContact"
      required: true
    CreateCooperationBody:
      description: A payload for creating a Cooperation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCooperation'
      required: true
    UpdateCooperationBody:
      description: A payload for updating current Cooperation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCooperation'
      required: true
    CreateHouseBody:
      description: A payload for creating a house
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateHouse'
      required: true
    UpdateHouseBody:
      description: A payload for updating an existing House
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateHouse'
      required: true


  parameters:
    p_id:
      name: id
      in: path
      description: The ID
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    p_user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    p_cooperation_id:
      name: cooperation_id
      in: path
      required: true
      description: The ID of the Cooperation
      schema:
        type: integer
        format: int64
        example: 1
    page_number:
      in: query
      name: page_number
      schema:
        type: integer
        minimum: 1
        default: 1
      required: false
      description: The number of current page.
    page_size:
      in: query
      name: page_size
      schema:
        type: integer
        minimum: 1
        maximum: 10
        default: 5
      required: false
      description: The number of items to return.
    id:
      in: query
      name: id
      schema:
        type: integer
        format: int64
        example: 1
    sort:
      in: query
      name: sort
      schema:
        type: string
        default: id,asc
    filter:
      in: query
      name: filter
      schema:
        type: string
    title:
      in: query
      name: title
      schema:
        type: string
      description: The title of the News
    text:
      in: query
      name: text
      schema:
        type: string
      description: The content of the News
    source:
      in: query
      name: source
      schema:
        type: string
      description: The source of the News
    email:
      in: query
      name: email
      schema:
        type: string
      description: The email of the User
    phone:
      in: query
      name: phone
      schema:
        type: string
      description: Phone of the Contact
    first_name:
      in: query
      name: first_name
      schema:
        type: string
      description: The First Name of the User
    last_name:
      in: query
      name: last_name
      schema:
        type: string
      description: The Last name of the User
    contact_phone:
      in: query
      name: contact_phone
      schema:
        type: string
      description: Contact phone of the User
    contact_email:
      in: query
      name: contact_email
      schema:
        type: string
      description: Contact email of the User
    main:
      in: query
      name: main
      schema:
        type: string
      description: Specifies if its a main Contact of the User
    type:
      in: query
      name: type
      schema:
        type: string
      description: Type of the Contact
    name:
      in: query
      name: name
      schema:
        type: string
        example: "Dobro"
    iban:
      in: query
      name: iban
      schema:
        type: string
        example: "77778"
    usreo:
      in: query
      name: usreo
      schema:
        type: string
        example: "A9856738"
    quantity_flat:
      in: query
      name: quantity_flat
      schema:
        type: integer
        example: 10
    adjoining_area:
      in: query
      name: adjoining_area
      schema:
        type: integer
        example: 40
    house_area:
      in: query
      name: house_area
      schema:
        type: number
        example: 20
